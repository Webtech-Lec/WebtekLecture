HTML Elements: 
Html
	Head
		Title, base, link, meta, style
	Body
		Article, aside, max, section
		Header, footer
		Main (main content)
		Address (content information)
		div (generic divider for block elements)

		h1, h2, h3, h4, h5, h6 (six levels of headings)

		p
		hr (horizontal line)
		pre (preformatted text)
		blockquote (for quotations)

		ol, ul (ordered list, unordered list)
			li (description list)
		dl
			dt, dd
		figure
			figcaption
		a
		em, strong, small, s
		cite, q
		dfn, abbr (defining instances, abbreviation)
		ruby, rb, rt, rtc, rp (ruby annotations)
		data, time
		code, var, samp, kbd
		sup, sub
		I, b, u, mark
		bdi, bdo (bidirectional text)
		span (generic divider for inline elements)
		br, wbr
		ins, del (document insertion and deletion)
		
		table
			caption
			colgroup, col
			thead, tbody, tfoot
				tr
					th, td

Cascading Style Sheet (CSS)
-	Language used to specify the presentation aspects (e.g. layout and formatting) of structurally marked up documents.
-	Developed by Hakom Wium Lie (CHSS) and Bert Bos (SSP)
-	Versions: 
o	CSS 1 (December 1996)
o	CSS 2.1 (June 2011)
o	CSS 3
-	CSS Preprocessors, CSS Framework
o	Sass, Less, 960 Grid System, Bootstrap, Foundation, Materialize, etc.
HTML/XHTML Stylesheet
-	Author styles
o	External stylesheet (recommended)
	Uses the link element
(ref, type, href, media, title)
	Alternate stylesheet supported in firefox

o	Embedded Styles
	Responsve design
	For quick prototyping
o	Inline styles
-	User agent styles (example default CSS 2.1 stylesheets for HTML 4)
Style sheets may have three different origins: author, user, and user agent.
	Author. The author specifies style sheets for a source document according to the conventions of the document language. For instance, in HTML, style sheets may be included in the document or linked externally.
	User: The user may be able to specify style information for a particular document. For example, the user may specify a file that contains a style sheet or the user agent may provide an interface that generates a user style sheet (or behaves as if it did).
	User agent: Conforming user agents must apply a default style sheet (or behave as if they did). A user agent's default style sheet should present the elements of the document language in ways that satisfy general presentation expectations for the document language (e.g., for visual browsers, the EM element in HTML is presented using an italic font). Style sheets from these three origins will overlap in scope, and they interact according to the cascade.
	
CSS Statements
-	At - Rules
@charset
@import
@media
@font-face (define and download webfonts)
@keyframes (keyframe animation)
@page
-	CSS Rule Set (aka CSS Rules, Style Rules)
o	Consist of a selector, followed by a brace-enclosed declaration block
e.g. *body is a selector
		body {
display: none;
color: blue
}
CSS Selectors
-	Selector
o	Structure used as a condition in a CSS rule to determine which elements in the documentation tree are matched by the selector and are thus targeted by the formatting specified in the CSS rule declaration block.
o	The matched elements are called the subjects of the selector
-	Selector syntax
o	Chain of one or more sequences of simple selectors separated by combinators, with one pseudo-element possibly appended to the last sequence.
Example: div #abc > p.xyz [title] + span: first_child::after
>, + = contributor
After = pseudo-element
Span:first_child::after = pseudo-class
o	Sequence of simple selectors
	Chain of simple selectors not separated by combinators
	Always starts with a type sector or a universal selector
	Cannot contain other type selectors or universal selectors
o	Group of selectors
	Coma- separated list of selectors representing the union of all elements
e.g. h1, h2, h3
-	Simple selectors
o	Type selector (p, div, span)
o	Universal selector (*)
o	Attribute selector
	[attr]
	[attr=value]
	[attr~=value] (class attribute)
	[attr |= value] (language attribute)
	[attr^=value] (start CSS3)
	[attr$=value] (end CSS3)
	[attr*=value] (anywhere in between CSS3)
o	Class selector (<p class=”xyz”>)
o	ID selector (<div id=”abc”> *for ID attribute)
o	pseudo-selector
	Dynamic pseudo-class
	link pseudo-classes
: link
: visited
	user action pseudo-classes
	: hover
	: active
	: focus
	target pseudo-class
	: target (CSS3)
	language pseudo-class
	: lang()
	UI element states pseudo-class
	: enabled (CSS3)
	: disabled (CSS3)
	: checked (CSS3)
	: indeterminate (CSS3)
	structural pseudo-class
	: root
	: first-child
	: last-child
	: only-child
	: nth-child()
	: nth-last-child
	: first-of-type
	: last-of-type
	: only-of-type
	: nth-of-type()
	: nth-last-of-type()
: empty
*all CSS3 except first-child
	negation
	:not (CSS3)
o	combinators
	descendant combinator (whitespace ie space, tab, line feed, carriage return, form feed)
	child combinator (>)
	sibling combinators
		adjacent sibling combinator (+)
		general sibling combinator (~) CSS3
o	pseudo-elements
	:: first-letter	, : first-letter
	:: first-line	, : first-line
	:: before	, : before
	:: after		, : after



CSS Rule Precedence
>by origin and importance
//ADDED
-Resource: https://www.w3.org/TR/CSS2/cascade.html
	Sort according to importance (normal or important) and origin (author, user, or user agent). In ascending order of precedence:
o	user agent important declarations
o	user important declarations
o	author important declarations
o	author normal declarations
o	user normal declarations
o	user agent normal declarations
	by specificity
o	inline style
o	number of ID selectors
o	number of class selectors, attribute selectors and pseudo-classes
o	number of type selectors and pseudo-elements
	by order

CSS Declarations
	Properties
		-shorthand properties
			- initial	(non-inheritable, global keyword)
			- inherit	(inheritable)     
 			- unset	    (inheritable, non-inheritable)
			- revert	(global keyword)	
		-vendor-specific extensions 
			- also known as vendor prefixes
	B. Values
		- keywords
		- numbers (integers and reals in decimal notation)
		- dimensions
			- length, angle, duration, frequency, resolution
			- length units:
				- font-relative: em ex ch rem
				- viewport-percentage: vw vmin vmax
				- absolute lengths: cm mm q in pt pc px
			- angle units: deg grad rad turn
			- duration units: s ms
			- frequency units: hz khz
			- resolution units: dpi dpcm dppx
		- percentages
		- URLs and URIs
		- colors
		- strings
		- functions: calc() attr() counter() counters() linear-gradient() radial-gradient() translate() scale() rotate() etc.

JAVASCRIPT SRC= https://developer.mozilla.org/en-US/docs/Web/JavaScript
JavaScript (JS) is a lightweight interpreted or JIT-compiled programming language with first-class functions. While it is most well-known as the scripting language for Web pages, many non-browser environments also use it, such as node.js and Apache CouchDB. JavaScript is a prototype-based, multi-paradigm, dynamic language, supporting object-oriented, imperative, and declarative (e.g. functional programming) styles.
	<scrip type=’text/javascript’ scr=script.js>
SRFC= https://www.w3schools.com/tags/tag_script.asp
The <script> tag is used to define a client-side script (JavaScript).
The <script> element either contains scripting statements, or it points to an external script file through the src attribute.
Internal Script:
External Script:
There are several ways an external script can be executed:
•	If async="async": The script is executed asynchronously with the rest of the page (the script will be executed while the page continues the parsing)
•	If async is not present and defer="defer": The script is executed when the page has finished parsing
•	If neither async or defer is present: The script is fetched and executed immediately, before the browser continues parsing the page

Variables
Variables are containers that you can store values in. You start by declaring a variable with the var keyword, followed by any name you want to call it:
	var myVariable;

Note that variables have different data types:
>	String
A sequence of text known as a string. To signify that the variable is a string, you should enclose it in quote marks.	
	var myVariable = 'Bob';
	
>	Number
A number. Numbers don't have quotes around them.	
	var myVariable = 10;

>	Boolean
A True/False value. The words true and false are special keywords in JS, and don't need quotes.	
	var myVariable = true;

>	Array
A structure that allows you to store multiple values in one single reference.	var myVariable = [1,'Bob','Steve',10];
Refer to each member of the array like this:
	myVariable[0], myVariable[1], etc.

>	Object
Basically, anything. Everything in JavaScript is an object, and can be stored in a variable. Keep this in mind as you learn.	
	var myVariable = document.querySelector('h1');


Both let and const create variables that are block-scoped – they only exist within the innermost block that surrounds them.
Let -declared variable tmp only exists inside the then-block of the if statement:
In contrast, var-declared variables are function-scoped.
const creates immutable variables  
•	Variables created by let are mutable:
•	Variables created by const, constants, are immutable:
Note that const does not affect whether the value of a constant itself is mutable or not: If a constant refers to an object, it will always refer to that object, but the object itself can still be changed (if it is mutable).
The global object  

JavaScript’s global object (window in web browsers, global in Node.js) is more a bug than a feature, especially with regard to performance. That’s why it’s not surprising that ES6 introduces a distinction:

All properties of the global object are global variables. In global scope, the following declarations create such properties:
•	var declarations
•	Function declarations
But there are now also global variables that are not properties of the global object. In global scope, the following declarations create such variables:
•	let declarations
•	const declarations
•	Class declarations

JAVASCRIPT SCOPE
	In JavaScript, objects and functions are also variables.
In JavaScript, scope is the set of variables, objects, and functions you have access to.
JavaScript has function scope: The scope changes inside functions.

•	Local JavaScript Variables
Variables declared within a JavaScript function, become LOCAL to the function. 
Local variables have local scope: They can only be accessed within the function.
•	Since local variables are only recognized inside their functions, variables with the same name can be used in different functions.
•	Local variables are created when a function starts, and deleted when the function is completed.

•	Global JavaScript Variables
A variable declared outside a function, becomes GLOBAL.
A global variable has global scope: All scripts and functions on a web page can access it.
•	Automatically Global
If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable.

•	Global Variables in HTML
With JavaScript, the global scope is the complete JavaScript environment.
In HTML, the global scope is the window object. All global variables belong to the window object.

JavaScript Methods
JavaScript methods are the actions that can be performed on objects and a JavaScript method is a property containing a function definition.

Javascipt JSON
JSON is a format for storing and transporting data. JSON is often used when data is sent from a server to a web page.

What is JSON?
•	JSON stands for JavaScript Object Notation
•	JSON is lightweight data interchange format
•	JSON is language independent *
•	JSON is "self-describing" and easy to understand
* The JSON syntax is derived from JavaScript object notation syntax, but the JSON format is text only. Code for reading and generating JSON data can be written in any programming language.

The JSON Format Evaluates to JavaScript Objects The JSON format is syntactically identical to the code for creating JavaScript objects. Because of this similarity, a JavaScript program can easily convert JSON data into native JavaScript objects.

JSON Syntax Rules
Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays



